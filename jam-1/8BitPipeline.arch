;	Registers 

register  8	a,b, c,d	 
register  8	tl, th	 ; together they form tx
register 16	si, di
register 16	tx,pc,ra,sp
register 16	ab, cd	 ;ab,cd are "fake" to facilitiate address loading. 
;	Macro-registers
register  8	sil, sih, dil, dih	;Individual bytes of SI and DI
register 16	x, y	;Equivalent to SI and DI respectively.
register  8	si_autoinc,si_autodec
register  8	di_autoinc,di_autodec

;	IO Ports
;register  8	lcdCommand ,lcdData 	;Legacy!
register  8	uart_data,uart_ctrl
register  8	audio_data
register  8	cntrl_data
register  8	vga
register  8	gpio 

;	Device allocation
;     Dev 8	.W	Audio
;     Dev 9	R.	NES/SNES Controller
;     Dev 10	R.	VGA Status (sync, blank, etc.)
;     Dev 11	RW	UART Data
;     Dev 12	RW	UART Ctrl
;     Dev 13	.W	Unallocated (GPIO direction/2nd GPIO?) (legacy use - lcdData)
;     Dev 14	RW	GPIO Data

;	Definition helpers
;Ignore "proc" and "endp" instr. to use them with notepad++'s folding
opcode	proc	:		 
opcode	endp	: ;.subsegment

opcode	foldstart	: ;
opcode	foldmid		: ; 
opcode	foldend		: ;

;nop instruction is simpliest, and we need it to be 0x00 
opcode	nop			: db 0
opcode	cnop			: ; nops's guarding mem clashes (shouldn't be needed anymore)

;constant loads
opcode	mov	a,	#1	: db 0x01,#1
opcode	mov	b,	#1	: db 0x02,#1
opcode	mov	c,	#1	: db 0x03,#1
opcode	mov	d,	#1	: db 0x04,#1
opcode	mov	tl,	#1	: db 0x05,#1  
opcode	mov	th,	#1	: db 0x06,#1  

;fake constant loads
opcode	mov	tx,	#1	: db 0x05,#1,0x06,#1>>8
opcode	mov	ab,	#1	: db 0x01,#1,0x02,#1>>8
opcode	mov	cd,	#1	: db 0x03,#1,0x04,#1>>8
opcode	mov	si,	#1	: db 0x05,#1,0x06,#1>>8,0x27
opcode	mov	di,	#1	: db 0x05,#1,0x06,#1>>8,0x29


;8 bit register to register moves
;		4*3 = 12
opcode	mov	a,	b	: db 0x07
opcode	mov	a,	c	: db 0x08
opcode	mov	a,	d	: db 0x09
opcode	mov	b,	a	: db 0x0A
opcode	mov	b,	c	: db 0x0B
opcode	mov	b,	d	: db 0x0C
opcode	mov	c,	a	: db 0x0D
opcode	mov	c,	b	: db 0x0E
opcode	mov	c,	d	: db 0x0F
opcode	mov	d,	a	: db 0x10
opcode	mov	d,	b	: db 0x11
opcode	mov	d,	c	: db 0x12

opcode	mov	tl,	a	: db 0x13
opcode	mov	tl,	b	: db 0x14
opcode	mov	tl,	c	: db 0x15
opcode	mov	tl,	d	: db 0x16
opcode	mov	th,	a	: db 0x17
opcode	mov	th,	b	: db 0x18
opcode	mov	th,	c	: db 0x19
opcode	mov	th,	d	: db 0x1a

opcode	mov	a,	tl	: db 0x1b
opcode	mov	b,	tl	: db 0x1c
opcode	mov	c,	tl	: db 0x1d
opcode	mov	d,	tl	: db 0x1e
opcode	mov	a,	th	: db 0x1f
opcode	mov	b,	th	: db 0x20
opcode	mov	c,	th	: db 0x21
opcode	mov	d,	th	: db 0x22


;16 bit move instructions
opcode	mov	ra,	tx	: db 023
opcode	mov	tx,	ra	: db 024
opcode	mov	sp,	tx	: db 025
opcode	mov	tx,	sp	: db 026
opcode	mov	si,	tx	: db 027
opcode	mov	tx,	si	: db 028
opcode	mov	di,	tx	: db 029
opcode	mov	tx,	di	: db 02A
opcode	mov	di,	si	: db 02B
opcode	mov	si,	di	: db 02C
opcode	mov	si,	sp	: db 02D
opcode	mov	di,	sp	: db 02E


;16 bit increment's and decrements
;	Empty slot		: db 0x30
;opcode	dec	sp		: db 0x31		;never used 
opcode	dec	si		: db 0x32
opcode	dec	di		: db 0x33
;opcode	inc	sp		: db 0x34	       ;never used 
opcode	inc	si		: db 0x35
opcode	inc	di		: db 0x36

;IO
opcode	out	gpio,	a	: db 0x37
;	Empty slot		: db 0x38
opcode	in	a,	gpio	: db 0x3e

opcode	out	uart_data,	a	: db 0x39
opcode	in	a,	uart_data	: db 0x3a
opcode	in	a,	uart_ctrl	: db 0x3b

opcode	out	audio_data,	a	: db 0x3c
opcode	in	a,	cntrl_data	: db 0x3d

       
opcode	in	a,	vga	: db 0x31

opcode	break			: db 0,0x3f,0,0

;Memory Read
opcode	mov	a,	[si]	: db 0x40
opcode	mov	b,	[si]	: db 0x41
opcode	mov	c,	[si]	: db 0x42
opcode	mov	d,	[si]	: db 0x43
opcode	mov	a,	[di]	: db 0x44
opcode	mov	b,	[di]	: db 0x45
opcode	mov	c,	[di]	: db 0x46
opcode	mov	d,	[di]	: db 0x47
opcode	mov	a,	[tx]	: db 0x48
opcode	mov	b,	[tx]	: db 0x49
opcode	mov	c,	[tx]	: db 0x4A
opcode	mov	d,	[tx]	: db 0x4B

;Memory Write
opcode	mov	[si],	a	: db 0x4C
opcode	mov	[si],	b	: db 0x4D
opcode	mov	[si],	c	: db 0x4E
opcode	mov	[si],	d	: db 0x4F
opcode	mov	[di],	a	: db 0x50
opcode	mov	[di],	b	: db 0x51
opcode	mov	[di],	c	: db 0x52
opcode	mov	[di],	d	: db 0x53
opcode	mov	[tx],	a	: db 0x54
opcode	mov	[tx],	b	: db 0x55
opcode	mov	[tx],	c	: db 0x56
opcode	mov	[tx],	d	: db 0x57

opcode	lodsb			: db 0x5b     ;a=[si++]
opcode	stosb			: db 0x7e     ;[di++]=a

;flow control

opcode	call	tx		: db 0x5c,0,0
opcode	call	di		: db 0x5d,0,0
opcode	ret			: db 0x5e,0,0

opcode	callBD		tx	: db 0x5c
opcode	callBD		di	: db 0x5d
opcode	retBD			: db 0x5e


opcode	prebranch		: db 0x5f
opcode	jmp tx			: db 0x5f,0x60
opcode	jmpBD tx		: db 0x60

;Single Flag
opcode	jo	tx		: db 0x5f,0x61	; Overflow
opcode	jno	tx		: db 0x5f,0x62	;!Overflow
opcode	js	tx		: db 0x5f,0x63	; Sign
opcode	jns	tx		: db 0x5f,0x64	;!Sign
opcode	jz	tx		: db 0x5f,0x65	; Zero
opcode	jnz	tx		: db 0x5f,0x66	;!Zero
opcode	je	tx		: db 0x5f,0x65	; Zero
opcode	jne	tx		: db 0x5f,0x66	;!Zero
opcode	jc	tx		: db 0x5f,0x67	; Carry
opcode	jnc	tx		: db 0x5f,0x68	;!Carry

; Unsigned operation
opcode	jnae	tx		: db 0x5f,0x68	; <  !Carry
opcode	jb	tx		: db 0x5f,0x68	; <  !Carry
opcode	jae	tx		: db 0x5f,0x67	; >=  Carry
opcode	jnb	tx		: db 0x5f,0x67	; >=  Carry
opcode	jbe	tx		: db 0x5f,0x69	; <= !Carry OR Zero
opcode	jna	tx		: db 0x5f,0x69	; <= !Carry OR Zero
opcode	ja	tx		: db 0x5f,0x6A	; >   Carry AND !Zero
opcode	jnbe	tx		: db 0x5f,0x6A	; >   Carry AND !Zero

; Signed operations
opcode	jl	tx		: db 0x5f,0x6B	; <   Sign != Overflow
opcode	jnge	tx		: db 0x5f,0x6B	; <   Sign != Overflow
opcode	jge	tx		: db 0x5f,0x6C	; >=  Sign == Overflow
opcode	jnl	tx		: db 0x5f,0x6C	; >=  Sign == Overflow
opcode	jle	tx		: db 0x5f,0x6D	; <=  Zero OR ( Sign != Overflow)
opcode	jng	tx		: db 0x5f,0x6D	; <=  Zero OR ( Sign != Overflow)
opcode	jg	tx		: db 0x5f,0x6E	; >   !Zero AND ( Sign == Overflow)
opcode	jnle	tx		: db 0x5f,0x6E	; >   !Zero AND ( Sign == Overflow)

; Logical Carry Operation
opcode	jlc	tx		: db 0x5f,0x6F	; Logical Carry
opcode	jnlc	tx		: db 0x5f,0x70	;!Logical Carry

opcode	jmp	di		: db 0x5f,0x71	

; branch macros
opcode	call	#1		: db 0x05,#1,0x06,#1>>8,0x5c,0,0	    
opcode	jmp	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x60	    


;branch macro Single Flag
opcode	jo	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x61	 ; Overflow
opcode	jno	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x62	 ;!Overflow
opcode	js	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x63	 ; Sign
opcode	jns	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x64	 ;!Sign
opcode	jz	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x65	 ; Zero
opcode	jnz	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x66	 ;!Zero
opcode	je	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x65	 ; Zero
opcode	jne	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x66	 ;!Zero
opcode	jc	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x67	 ; Carry
opcode	jnc	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x68	 ;!Carry

; branch macro Unsigned operation
opcode	jnae	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x68	 ; <  !Carry
opcode	jb	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x68	 ; <  !Carry
opcode	jae	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x67	 ; >=  Carry
opcode	jnb	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x67	 ; >=  Carry
opcode	jbe	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x69	 ; <= !Carry OR Zero
opcode	jna	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x69	 ; <= !Carry OR Zero
opcode	ja	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x6A	 ; >   Carry AND !Zero
opcode	jnbe	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x6A	 ; >   Carry AND !Zero

; branch macro Signed operations
opcode	jl	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x6B	 ; <   Sign != Overflow
opcode	jnge	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x6B	 ; <   Sign != Overflow
opcode	jge	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x6C	 ; >=  Sign == Overflow
opcode	jnl	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x6C	 ; >=  Sign == Overflow
opcode	jle	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x6D	 ; <=  Zero OR ( Sign != Overflow)
opcode	jng	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x6D	 ; <=  Zero OR ( Sign != Overflow)
opcode	jg	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x6E	 ; >   !Zero AND ( Sign == Overflow)
opcode	jnle	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x6E	 ; >   !Zero AND ( Sign == Overflow)

opcode	jlc	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x6F	 ; Logical Carry
opcode	jnlc	#1		: db 0x05,#1,0x06,#1>>8,0x5f,0x70	 ;!Logical Carry



; Stack operations
opcode	push	a		: db 0x72
opcode	push	b		: db 0x73
opcode	push	c		: db 0x74
opcode	push	d		: db 0x75
opcode	push	tl		: db 0x76
opcode	push	th		: db 0x77

opcode	pop	a		: db 0x78
opcode	pop	b		: db 0x79
opcode	pop	c		: db 0x7a
opcode	pop	d		: db 0x7b
opcode	pop	tl		: db 0x7c
opcode	pop	th		: db 0x7d
	

; Fake 16 bit stack operations

opcode	push	tx		: db 0x76,0x77
opcode	push	ra		: db 0x24,0x76,0x77
opcode	push	sp		: db 0x26,0x76,0x77
opcode	push	si		: db 0x28,0x76,0x77
opcode	push	di		: db 0x2A,0x76,0x77

opcode	pop	tx		: db 0x7d,0x7c
opcode	pop	ra		: db 0x7d,0x7c,0,0x23
opcode	pop	sp		: db 0x7d,0x7c,0,0x25
opcode	pop	si		: db 0x7d,0x7c,0,0x27
opcode	pop	di		: db 0x7d,0x7c,0,0x29


;clear carry
opcode	clc			: db 0x7F
;shifts
opcode	shl	a		: db 0x80
opcode	shl	b		: db 0x81
opcode	shl	c		: db 0x82
opcode	shl	d		: db 0x83
opcode	shr	a		: db 0x84
opcode	shr	b		: db 0x85
opcode	shr	c		: db 0x86
opcode	shr	d		: db 0x87

;addition 4*3 = 12
opcode	add	a,	b	: db 0x88
opcode	add	a,	c	: db 0x89
opcode	add	a,	d	: db 0x8A
opcode	add	b,	a	: db 0x8B
opcode	add	b,	c	: db 0x8C
opcode	add	b,	d	: db 0x8D
opcode	add	c,	a	: db 0x8E
opcode	add	c,	b	: db 0x8F
opcode	add	c,	d	: db 0x90
opcode	add	d,	a	: db 0x91
opcode	add	d,	b	: db 0x92
opcode	add	d,	c	: db 0x93
opcode	add	b,	b	: db 0x59

;addition 4*3 = 12 (With carry)
opcode	addc	a,	b	: db 0x94
opcode	addc	a,	c	: db 0x95
opcode	addc	a,	d	: db 0x96
opcode	addc	b,	a	: db 0x97
opcode	addc	b,	b	: db 0x58
opcode	addc	b,	c	: db 0x98
opcode	addc	b,	d	: db 0x99
opcode	addc	c,	a	: db 0x9A
opcode	addc	c,	b	: db 0x9B
opcode	addc	c,	d	: db 0x9C
opcode	addc	d,	a	: db 0x9D
opcode	addc	d,	b	: db 0x9E
opcode	addc	d,	c	: db 0x9F

opcode	adc	a,	b	: db 0x94
opcode	adc	a,	c	: db 0x95
opcode	adc	a,	d	: db 0x96
opcode	adc	b,	a	: db 0x97
opcode	adc	b,	b	: db 0x58
opcode	adc	b,	c	: db 0x98
opcode	adc	b,	d	: db 0x99
opcode	adc	c,	a	: db 0x9A
opcode	adc	c,	b	: db 0x9B
opcode	adc	c,	d	: db 0x9C
opcode	adc	d,	a	: db 0x9D
opcode	adc	d,	b	: db 0x9E
opcode	adc	d,	c	: db 0x9F

opcode	addac	c,	a	: db 0x5a

;8 bit increment 
opcode	inc	a		: db 0xA0
opcode	inc	b		: db 0xA1
opcode	inc	c		: db 0xA2
opcode	inc	d		: db 0xA3

opcode	incc	a		: db 0xA4
opcode	incc	b		: db 0xA5
opcode	incc	c		: db 0xA6
opcode	incc	d		: db 0xA7
opcode	incc	si		: db 0x34

;subtract 
opcode	sub	a,	b	: db 0xA8
opcode	sub	a,	c	: db 0xA9
opcode	sub	a,	d	: db 0xAA
opcode	sub	b,	a	: db 0xAB
opcode	sub	b,	c	: db 0xAC
opcode	sub	b,	d	: db 0xAD
opcode	sub	c,	a	: db 0xAE
opcode	sub	c,	b	: db 0xAF
opcode	sub	c,	d	: db 0xB0
opcode	sub	d,	a	: db 0xB1
opcode	sub	d,	b	: db 0xB2
opcode	sub	d,	c	: db 0xB3
opcode	subae	d,	c	: db 0x2f

;subtract 
opcode	subb	a,	b	: db 0xB4
opcode	subb	a,	c	: db 0xB5
opcode	subb	a,	d	: db 0xB6
opcode	subb	b,	a	: db 0xB7
opcode	subb	b,	c	: db 0xB8
opcode	subb	b,	d	: db 0xB9
opcode	subb	c,	a	: db 0xBA
opcode	subb	c,	b	: db 0xBB
opcode	subb	c,	d	: db 0xBC
opcode	subb	d,	a	: db 0xBD
opcode	subb	d,	b	: db 0xBE
opcode	subb	d,	c	: db 0xBF

opcode	sbb	a,	b	: db 0xB4
opcode	sbb	a,	c	: db 0xB5
opcode	sbb	a,	d	: db 0xB6
opcode	sbb	b,	a	: db 0xB7
opcode	sbb	b,	c	: db 0xB8
opcode	sbb	b,	d	: db 0xB9
opcode	sbb	c,	a	: db 0xBA
opcode	sbb	c,	b	: db 0xBB
opcode	sbb	c,	d	: db 0xBC
opcode	sbb	d,	a	: db 0xBD
opcode	sbb	d,	b	: db 0xBE
opcode	sbb	d,	c	: db 0xBF

;8 bit decrement
opcode	dec	a		: db 0xC0
opcode	dec	b		: db 0xC1
opcode	dec	c		: db 0xC2
opcode	dec	d		: db 0xC3

;and 
opcode	and	a,b		: db 0xC4
opcode	and	a,c		: db 0xC5
opcode	and	a,d		: db 0xC6
opcode	and	b,a		: db 0xC7
opcode	and	b,c		: db 0xC8
opcode	and	b,d		: db 0xC9
opcode	and	c,a		: db 0xCA
opcode	and	c,b		: db 0xCB
opcode	and	c,d		: db 0xCC
opcode	and	d,a		: db 0xCD
opcode	and	d,b		: db 0xCE
opcode	and	d,c		: db 0xCF

;or
opcode	or	a,	b	: db 0xD0
opcode	or	a,	c	: db 0xD1
opcode	or	a,	d	: db 0xD2
opcode	or	b,	a	: db 0xD3
opcode	or	b,	c	: db 0xD4
opcode	or	b,	d	: db 0xD5
opcode	or	c,	a	: db 0xD6
opcode	or	c,	b	: db 0xD7
opcode	or	c,	d	: db 0xD8
opcode	or	d,	a	: db 0xD9
opcode	or	d,	b	: db 0xDA
opcode	or	d,	c	: db 0xDB

;xor
opcode	xor	a,	b	: db 0xDC
opcode	xor	a,	c	: db 0xDD
opcode	xor	a,	d	: db 0xDE
opcode	xor	b,	a	: db 0xDF
opcode	xor	b,	c	: db 0xE0
opcode	xor	b,	d	: db 0xE1
opcode	xor	c,	a	: db 0xE2
opcode	xor	c,	b	: db 0xE3
opcode	xor	c,	d	: db 0xE4
opcode	xor	d,	a	: db 0xE5
opcode	xor	d,	b	: db 0xE6
opcode	xor	d,	c	: db 0xE7
opcode	xor	a,	a	: db 0xE8
opcode	xor	b,	b	: db 0xE9
opcode	xor	c,	c	: db 0xEA
opcode	xor	d,	d	: db 0xEB

;not
opcode	not	a		: db 0xEC
opcode	not	b		: db 0xED
opcode	not	c		: db 0xEE
opcode	not	d		: db 0xEF

;cmp
opcode	cmp	a,	b	: db 0xF0
opcode	cmp	a,	c	: db 0xF1
opcode	cmp	a,	d	: db 0xF2
opcode	cmp	b,	a	: db 0xF3
opcode	cmp	b,	c	: db 0xF4
opcode	cmp	b,	d	: db 0xF5
opcode	cmp	c,	a	: db 0xF6
opcode	cmp	c,	b	: db 0xF7
opcode	cmp	c,	d	: db 0xF8
opcode	cmp	d,	a	: db 0xF9
opcode	cmp	d,	b	: db 0xFA
opcode	cmp	d,	c	: db 0xFB

;test
opcode	test	a		: db 0xFC
opcode	test	b		: db 0xFD
opcode	test	c		: db 0xFE
opcode	test	d		: db 0xFF


;------------------------------Powerful macroses------------------------------

;string operation macroses
opcode	movsb			: db 0x5B,0x7E
opcode	movsw			: db 0x5B,0x7E,0x5B,0x7E
opcode	lodsw			: db 0x5B,0x0A,0x5B
opcode	stosw			: db 0x51,0x36,0x7E
;Negation
opcode	neg	a		: db 0x75,0x04,0xFF,0xDE,0x7b,0xA0
opcode	neg	b		: db 0x75,0x04,0xFF,0xE1,0x7b,0xA1
opcode	neg	c		: db 0x75,0x04,0xFF,0xE4,0x7b,0xA2
opcode	neg	d		: db 0x74,0x03,0xFF,0xE7,0x7a,0xA3
;16-bit move macroses
opcode	mov	ab,	cd	: db 0x08,0x0C
opcode	mov	cd,	ab	: db 0x0D,0x11
;TX <-> Reg. pair                          
opcode	mov	tx,	ab	: db 0x13,0x18
opcode	mov	tx,	cd	: db 0x15,0x1a
opcode	mov	ab,	tx	: db 0x1b,0x20
opcode	mov	cd,	tx	: db 0x1d,0x22
;SI/DI <-> Reg. pair
opcode	mov	si,	ab	: db 0x13,0x18,0x00,0x27
opcode	mov	di,	ab	: db 0x13,0x18,0x00,0x29
opcode	mov	si,	cd	: db 0x15,0x1a,0x00,0x27
opcode	mov	di,	cd	: db 0x15,0x1a,0x00,0x29
opcode	mov	ab,	si	: db 0x28,0x00,0x1b,0x20
opcode	mov	ab,	di	: db 0x2A,0x00,0x1b,0x20
opcode	mov	cd,	si	: db 0x28,0x00,0x1d,0x22
opcode	mov	cd,	di	: db 0x2A,0x00,0x1d,0x22
opcode	mov	ra,	ab	: db 0x13,0x18,0x00,0x23
opcode	mov	ra,	cd	: db 0x15,0x1a,0x00,0x23
opcode	mov	ab,	ra	: db 0x24,0x00,0x1b,0x20
opcode	mov	cd,	ra	: db 0x24,0x00,0x1d,0x22
;SI/DI  -> Register
opcode	mov	a,	sil	: db 0x28,0x00,0x1b
opcode	mov	a,	dil	: db 0x2A,0x00,0x1b
opcode	mov	b,	sil	: db 0x28,0x00,0x1c
opcode	mov	b,	dil	: db 0x2A,0x00,0x1c
opcode	mov	c,	sil	: db 0x28,0x00,0x1d
opcode	mov	c,	dil	: db 0x2A,0x00,0x1d
opcode	mov	d,	sil	: db 0x28,0x00,0x1e
opcode	mov	d,	dil	: db 0x2A,0x00,0x1e
opcode	mov	a,	sih	: db 0x28,0x00,0x1f
opcode	mov	a,	dih	: db 0x2A,0x00,0x1f
opcode	mov	b,	sih	: db 0x28,0x00,0x20
opcode	mov	b,	dih	: db 0x2A,0x00,0x20
opcode	mov	c,	sih	: db 0x28,0x00,0x21
opcode	mov	c,	dih	: db 0x2A,0x00,0x21
opcode	mov	d,	sih	: db 0x28,0x00,0x22
opcode	mov	d,	dih	: db 0x2A,0x00,0x22
;Reg. pair inc/dec
opcode	inc	ab		: db 0xA0,0xA5
opcode	inc	cd		: db 0xA2,0xA7
opcode	dec	ab		: db 0xC0,0x75,0x04,0x00,0xB9,0x7B
opcode	dec	cd		: db 0xC2,0x73,0x02,0x00,0xBE,0x79
					;dec	a/c
					;push	d/b
					;mov	d/b,	imm8
					;db	0
					;sbb	b/d,	d/b
					;pop	d/b
;TX inc/dec
opcode	inc	tx	: db 0x72,0x73,0x1b,0x20,0xA0,0xA5,0x13,0x18,0x78,0x79
opcode	dec	tx	: db 0x72,0x73,0x1b,0x20,0xC0,0x75,0x04,0x00,0xB9,0x7B,0x13,0x18,0x79,0x78
					;push	a	b	;2/4
					;mov	ab,	tx	;2/2
					;dec	ab		;6/8
					;mov	tx,	ab	;2/2
					;pop	b	a	;2/4
								;14	bytes
								;20	cycles
;Reg. pair push/pop
opcode	push	ab		: db 0x72,0x73
opcode	push	cd		: db 0x74,0x75
opcode	pop	ab		: db 0x79,0x78
opcode	pop	cd		: db 0x7b,0x7a
opcode	v_pha			: db 0x73,0x72
opcode	v_phb			: db 0x75,0x74
opcode	v_pla			: db 0x78,0x79
opcode	v_plb			: db 0x7a,0x7b
;Reg.pair add/sub
opcode	add	ab,	cd	: db 0x89,0x99
opcode	add	cd,	ab	: db 0x8E,0x9E
opcode	adc	ab,	cd	: db 0x95,0x99
opcode	adc	cd,	ab	: db 0x9A,0x9E
opcode	sub	ab,	cd	: db 0xA9,0xB9
opcode	sub	cd,	ab	: db 0xAE,0xBE
opcode	sbb	ab,	cd	: db 0xB5,0xB9
opcode	sbb	cd,	ab	: db 0xBA,0xBE
;Imm. add/sub
opcode	add	ab,	#1	: db 0x75,0x74,0x03,#1,0x04,#1>>8,0x89,0x99,0x7a,0x7b	;push cd; mov cd,#1; add ab,cd; pop cd
opcode	add	cd,	#1	: db 0x73,0x72,0x01,#1,0x02,#1>>8,0x8E,0x9E,0x78,0x79
opcode	adc	ab,	#1	: db 0x75,0x74,0x03,#1,0x04,#1>>8,0x95,0x99,0x7a,0x7b
opcode	adc	cd,	#1	: db 0x73,0x72,0x01,#1,0x02,#1>>8,0x9A,0x9E,0x78,0x79
opcode	sub	ab,	#1	: db 0x75,0x74,0x03,#1,0x04,#1>>8,0xA9,0xB9,0x7a,0x7b
opcode	sub	cd,	#1	: db 0x73,0x72,0x01,#1,0x02,#1>>8,0xAE,0xBE,0x78,0x79
opcode	sbb	ab,	#1	: db 0x75,0x74,0x03,#1,0x04,#1>>8,0xB5,0xB9,0x7a,0x7b
opcode	sbb	cd,	#1	: db 0x73,0x72,0x01,#1,0x02,#1>>8,0xBA,0xBE,0x78,0x79
;Reg.pair <-> Memory (Indirect)
opcode	mov	ab,	[si]	: db 0x40,0x35,0x41,0x00,0x32
opcode	mov	ab,	[di]	: db 0x44,0x36,0x45,0x00,0x33
opcode	mov	cd,	[si]	: db 0x42,0x35,0x43,0x00,0x32
opcode	mov	cd,	[di]	: db 0x46,0x36,0x47,0x00,0x33
opcode	mov	[si],	ab	: db 0x4C,0x35,0x4D,0x00,0x32
opcode	mov	[di],	ab	: db 0x50,0x36,0x51,0x00,0x33
opcode	mov	[si],	cd	: db 0x4E,0x35,0x4F,0x00,0x32
opcode	mov	[di],	cd	: db 0x52,0x36,0x53,0x00,0x33
;opcode	mov	ab,	[tx]	: db 0x48,0x76,0x77,072,073,0x1b,020,0A0,0A5,0x13,0x18,078,079,049,07d,07c
;opcode	mov	cd,	[tx]	: db 0x4A,0x76,0x77,072,073,0x1b,020,0A0,0A5,0x13,0x18,078,079,04B,07d,07c
;opcode	mov	[tx],	ab	: db 0x54,0x76,0x77,072,073,0x1b,020,0A0,0A5,0x13,0x18,078,079,055,07d,07c
;opcode	mov	[tx],	cd	: db 0x56,0x76,0x77,072,073,0x1b,020,0A0,0A5,0x13,0x18,078,079,057,07d,07c
;Register <-> Memory (Direct) (byte)
opcode	lda	#1		: db 0x05,#1,0x06,#1>>8,0x48
opcode	ldb	#1		: db 0x05,#1,0x06,#1>>8,0x49
opcode	ldc	#1		: db 0x05,#1,0x06,#1>>8,0x4A
opcode	ldd	#1		: db 0x05,#1,0x06,#1>>8,0x4B
opcode	sta	#1		: db 0x05,#1,0x06,#1>>8,0x54
opcode	stb	#1		: db 0x05,#1,0x06,#1>>8,0x55
opcode	stc	#1		: db 0x05,#1,0x06,#1>>8,0x56
opcode	std	#1		: db 0x05,#1,0x06,#1>>8,0x57
;Same but for word
opcode	lxa	#1		: db 0x05,#1,0x06,#1>>8,0x48,0x05,#1+1,0x06,(#1+1)>>8,0x49
opcode	lxc	#1		: db 0x05,#1,0x06,#1>>8,0x4A,0x05,#1+1,0x06,(#1+1)>>8,0x4B
opcode	sxa	#1		: db 0x05,#1,0x06,#1>>8,0x54,0x05,#1+1,0x06,(#1+1)>>8,0x55
opcode	sxc	#1		: db 0x05,#1,0x06,#1>>8,0x56,0x05,#1+1,0x06,(#1+1)>>8,0x57
;Misc memory <-> register
opcode	mov	c,	[ab]	: db 0x13,0x18,0x4A
;Absolute single-op arithmetic
opcode	inc_a_abs #1		: db 0x05,#1,0x06,#1>>8,0x48,0xA0,0x54
;Absolute arithmetic
opcode	cmp_b_abs a,	#1	: db 0x05,#1,0x06,#1>>8,0x49,0xF0
;Memory -> Memory
;Peek to top-of-stack
opcode	mov	a,	[sp]	: db 0x78,0,0x72
opcode	mov	b,	[sp]	: db 0x79,0,0x73
opcode	mov	c,	[sp]	: db 0x7a,0,0x74
opcode	mov	d,	[sp]	: db 0x7b,0,0x75
opcode	mov	tl,	[sp]	: db 0x7c,0,0x76
opcode	mov	th,	[sp]	: db 0x7d,0,0x77
;Exchange
opcode	xchg	b,	c	: db 0x14,0x0B,0x1d
opcode	xchg	a,	b	: db 0x13,0x07,0x1c
;Flp, fxp and mul/div
opcode	mul	a,	b	: db 0x06,math_quartersquare_table>>8,0x88,0xAB,0x13,0x48,0x14,0x49,0x00,0xA8
opcode	mul	c,	d	: db 0x06,math_quartersquare_table>>8,0x90,0xB3,0x15,0x4A,0x16,0x4B,0x00,0xB0
	;Dont forget that is is just a macro that ruins 2nd operand and TX!
		;mov 	th,	math_quartersquare_table/256	0x06 #1
		;add	a,	b	88
		;sub	b,	a	ab
		;mov	tl,	a	13
		;mov	a,	[tx]	48
		;mov	tl,	b	14
		;mov	b,	[tx]	49	
		;nop			0
		;sub	a,	b	A8

;Autoinc/autodec
opcode	mov	a,	si_autoinc	: db 0x40,0x35
opcode	mov	b,	si_autoinc	: db 0x41,0x35
opcode	mov	c,	si_autoinc	: db 0x42,0x35
opcode	mov	d,	si_autoinc	: db 0x43,0x35
opcode	mov	a,	di_autoinc	: db 0x44,0x36
opcode	mov	b,	di_autoinc	: db 0x45,0x36
opcode	mov	c,	di_autoinc	: db 0x46,0x36
opcode	mov	d,	di_autoinc	: db 0x47,0x36
opcode	mov	ab,	si_autoinc	: db 0x40,0x35,0x41,0x35
opcode	mov	cd,	si_autoinc	: db 0x42,0x35,0x43,0x35
opcode	mov	ab,	di_autoinc	: db 0x44,0x36,0x45,0x36
opcode	mov	cd,	di_autoinc	: db 0x46,0x36,0x47,0x36
opcode	mov	di_autoinc,	ab	: db 0x50,0x36,0x51,0x36
opcode	mov	di_autoinc,	a	: db 0x50,0x36
opcode	mov	di_autoinc,	b	: db 0x51,0x36
opcode	mov	di_autoinc,	c	: db 0x52,0x36
opcode	mov	di_autoinc,	d	: db 0x53,0x36
opcode	mov	si_autoinc,	a	: db 0x4C,0x35
opcode	mov	si_autoinc,	b	: db 0x4D,0x35
opcode	mov	si_autoinc,	c	: db 0x4E,0x35
opcode	mov	si_autoinc,	d	: db 0x4F,0x35
opcode	mov	di_autodec,	a	: db 0x50,0x33
opcode	mov	di_autodec,	b	: db 0x51,0x33
opcode	mov	di_autodec,	c	: db 0x52,0x33
opcode	mov	di_autodec,	d	: db 0x53,0x33




;Tests
opcode	test_a	[si]		: db 0x40,0xFC
opcode	test_b	[si]		: db 0x41,0xFD
opcode	test_c	[si]		: db 0x42,0xFE
opcode	test_d	[si]		: db 0x43,0xFF
opcode	test_a	[di]		: db 0x44,0xFC
opcode	test_b	[di]		: db 0x45,0xFD
opcode	test_c	[di]		: db 0x46,0xFE
opcode	test_d	[di]		: db 0x47,0xFF
opcode	test_a	[tx]		: db 0x48,0xFC
opcode	test_b	[tx]		: db 0x49,0xFD
opcode	test_c	[tx]		: db 0x4A,0xFE
opcode	test_d	[tx]		: db 0x4B,0xFF
opcode	test_a	si_autoinc	: db 0x40,0x35,0xFC
;DJNZ
opcode	djnz_b	#1			: db 0xC1,0x05,#1,0x06,#1>>8,0x5f,0x66
opcode	djnz_c	#1			: db 0xC2,0x05,#1,0x06,#1>>8,0x5f,0x66
opcode	djnz_d	#1			: db 0xC3,0x05,#1,0x06,#1>>8,0x5f,0x66
opcode	djnz_c	tx			: db 0xC2,0x5f,0x66
opcode	djnz_d	tx			: db 0xC3,0x5f,0x66
;Zero-extend                                 
opcode	movzx	cd,	si_autoinc	: db 0x42,0x35,0x04,0x00
opcode	movzx	ab,	c		: db 0x08,0x02,0x00
opcode	movzx	ab,	c		: db 0x09,0x02,0x00
opcode	addzx	ab,	c		: db 0x89,0xA5
opcode	addzx	cd,	a		: db 0x9A,0xA7
;Three-op
opcode	and	c,	a,	#1	: db 0x03,#1 ,0xCA
opcode	sub	d,	#1,	c	: db 0x04,#1 ,0xB3
opcode	or	b,	c,	d	: db 0x0B,0,0xD5
;Shifts
opcode	sal	a			: db 0x7F,0x80
opcode	sal	b			: db 0x7F,0x81
opcode	sal	c			: db 0x7F,0x82
opcode	sal	d			: db 0x7F,0x83
opcode	sal	ab			: db 0x7F,0x80,0x81
opcode	sal	cd			: db 0x7F,0x82,0x83
opcode	slr	a			: db 0x7F,0x84
opcode	slr	b			: db 0x7F,0x85
opcode	slr	c			: db 0x7F,0x86
opcode	slr	d			: db 0x7F,0x87
opcode	slr	ab			: db 0x7F,0x85,0x84
opcode	slr	cd			: db 0x7F,0x87,0x86
;16bit hardcoded add/sub
opcode	inc4	si			: db 0x35,0x35,0x35,0x35
opcode	dec3	si			: db 0x32,0x32,0x32
;Stack + autoinc
opcode	push_a	di_autoinc		: db 0x44,0x72,0x36
opcode	pop_a	di_autodec		: db 0x78,0x50,0x33
;Unsorted
opcode	reffield    ab,	cd	: db 0x13,0x18,0xA0,0xA5,0x72,0x73,0x48,0x7d,0x7c,0x49,0x89,0x99
opcode	reffield_cd ab, #1	: db 0x03,#1,0x04,#1>>8,0x13,0x18,0xA0,0xA5,0x72,0x73,0x48,0x7d,0x7c,0x49,0x89,0x99
			;C's "->" deref + addition
opcode	index	    ab,	cd	: db 0x89,0x99,0x13,0x18,0A0,0xA5,0x72,0x73,0x48,0x7d,0x7c,0x49
opcode	index_cd    ab,	#1	: db 0x03,#1,0x04,#1>>8,0x89,0x99,0x13,0x18,0A0,0xA5,0x72,0x73,0x48,0x7d,0x7c,0x49
			;C's "."  addition + deref
opcode	deref	ab	: db 0x13,0x18,0xA0,0xA5,0x72,0x73,0x48,0x7d,0x7c,0x49

			;add	ab,	cd	089,099
			;//mov	ab,	[ab]
			;mov	tx,	ab	0x13,0x18
			;inc	ab		0A0,0A5
			;push	ab		072,073
			;mov	a,	[tx]	048
			;pop	tx		07d,07c
			;mov	b,	[tx]	049

;	lea	ab,	[di+#1]	
opcode	add	ab,	di,	#1	: db 0x74,0x75,0x2A,0x00,0x1b,0x20,0x03,#1,0x04,#1>>8,0x89,0x99,0x74,0x75

opcode	inc_a	#1		: db 0x05,#1,0x06,#1>>8,0x48,0,0xA0,0x54
opcode	add_a	#1,	b	: db 0x05,#1,0x06,#1>>8,0x48,0,0x88,0x54


;				,,.........................,,
;				::Hardware support macroses::
;				""'''''''''''''''''''''''''""

; v As of CAsm 0.3, more than 1 imm. operand is not supported.
;inline void snd_out_const_a(uint8_t __const__ ch_id, uint16_t __const__ freq, uint8_t __const__ vol);
;Output to audio card a constant using temp. reg A
;opcode	snd_out_const_a	 #1,#2,#3	: db 001,#1,03c,001,#2,03c,001,(#2>>8)+(#3<<4),03c
;	I   [7-0]	ch. id
;	II  [7-0]	freq.
;	III [3-0]
;	III [7-4]	vol

	
	;			      High-level macroses
;With added reg pair absolute read/write, they are pretty much useless, so
;I stopped supporting them.
;opcode	v_int_ld_cd	#1	: db 0x05,#1,0x06,#1>>8,04A,0x05,(#1+1),0x06,(#1+1)>>8,04B
;opcode	v_tab			: db 00D,011
;opcode	v_ld	#1		: db 0x05,#1,0x06,#1>>8,048,0x05,(#1+1),0x06,(#1+1)>>8,049
;opcode	v_ldi	#1		: db 001,#1,002,#1>>8
;opcode	v_st	#1		: db 0x05,#1,0x06,#1>>8,054,0x05,(#1+1),0x06,(#1+1)>>8,055
;opcode	v_add	#1		: db 0x05,#1,0x06,#1>>8,04A,0x05,(#1+1),0x06,(#1+1)>>8,04B,089,099
;opcode	v_sub	#1		: db 0x05,#1,0x06,#1>>8,04A,0x05,(#1+1),0x06,(#1+1)>>8,04B,0A9,0B9
;opcode	v_adi	#1		: db 003,#1,004,#1>>8,089,099
;opcode	v_sbi	#1		: db 003,#1,004,#1>>8,0A9,0B9
;opcode	v_tax			: db 0x13,0x18,0x00,027
;opcode	v_txa			: db 028,0x00,0x1b,020
;opcode	v_tay			: db 0x13,0x18,0x00,029
;opcode	v_tya			: db 02A,0x00,0x1b,020
;opcode	v_txb			: db 028,0x00,0x1d,022
;opcode	v_tyb			: db 02A,0x00,0x1d,022
;opcode	v_index			: db 0x13,0x18,0A0,0A5,072,073,048,07d,07c,049,003,#1,004,#1>>8,089,099
;				;Fused dereference and addition.
;				;Equivalent to C's "->"
;				;Useful for calculating EA of struct field from struct*.
;				;mov	tx,	ab
;				;inc	ab
;				;push	ab
;				;mov	a,	[tx]
;				;pop	tx
;				;mov	b,	[tx]
;				;mov	cd,	#1
;				;add	ab,	cd
;opcode	v_ld	#1,	x	: db 001,#1,002,#1>>8,028,0x00,0x1d,022,089,099,0x13,0x18,0A0,0A5,072,073,048,07d,07c,049
;opcode	v_ld	#1,	y	: db 001,#1,002,#1>>8,02A,0x00,0x1d,022,089,099,0x13,0x18,0A0,0A5,072,073,048,07d,07c,049
;; | The following two are commented because CAsm 0.3-0.6.248 is not able to work with them
;; v They cause buffer overflow 
;;opcode	v_st	#1,	x	: db 073,072,001,#1,002,#1>>8,028,0x00,0x1d,022,089,099,07a,07b,0x13,0x18,0A0,0A5,072,073,054,07d,07c,055
;;opcode	v_st	#1,	y	: db 073,072,001,#1,002,#1>>8,02A,0x00,0x1d,022,0A9,0B9,07a,07b,0x13,0x18,0A0,0A5,072,073,056,07d,07c,057
;opcode	v_pha			: db 073,072
;opcode	v_phb			: db 075,074
;opcode	v_pla			: db 078,079
;opcode	v_plb			: db 07a,07b
;opcode	v_phx			: db 028,076,077
;opcode	v_phy			: db 02A,076,077
;opcode	v_plx			: db 07d,07c,0,027
;opcode	v_ply			: db 07d,07c,0,029
;opcode	v_shl			: db 07F,080,081
;opcode	v_shr			: db 07F,084,085
;opcode	v_rl			: db 080,081
;opcode	v_rr			: db 084,085
;opcode	v_add	b		: db 089,099
;opcode	v_sub	b		: db 0A9,0B9
;opcode	v_enter			: db 024,076,077
;opcode	v_leave			: db 07d,07c,0,023
;opcode	v_enter_y		: db 024,076,077,02A,076,077,02E
;opcode	v_leave_y		: db 025,02A,07d,07c,0,029,07d,07c,0,023

